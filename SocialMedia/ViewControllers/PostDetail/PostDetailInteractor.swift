//
//  PostDetailInteractor.swift
//  SocialMedia
//
//  Created by Yeşim Daşdemir on 21.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostDetailBusinessLogic {
    func getPostDetail()
}

protocol PostDetailDataStore {
    var selectedPostModel: SimpleItemViewModel? { get set }
}

final class PostDetailInteractor: PostDetailBusinessLogic, PostDetailDataStore {
    
    var presenter: PostDetailPresentationLogic?
    var worker: PostDetailWorker?
    var userId: Int = 0
    var selectedPostModel: SimpleItemViewModel? {
        didSet {
            guard let userId = selectedPostModel?.userId else {
                return
            }
            self.userId = userId
        }
    }
    private var userViewModel: PostDetail.GetUsers.Response?
    
    func getPostDetail() {
        let url = "https://jsonplaceholder.typicode.com/users?id=\(userId)"
        
        NetworkManager.fetchData(url: url) { [weak self] (response: [PostDetail.GetUsers.Response]) in
            guard let self = self, !response.isEmpty else {
                return
            }

            self.userViewModel = response.first
            self.getComments()
            
            debugPrint(response)
        }
    }
    
    func getComments() {
        let url = "https://jsonplaceholder.typicode.com/posts/\(userId)/comments"
        
        LoadingViewController.shared.showLoading()
        NetworkManager.fetchData(url: url) { [weak self] (response: [PostDetail.GetComments.Response]) in
            guard let self = self, !response.isEmpty else {
                return
            }
            LoadingViewController.shared.hideLoading()
            
            let postDetailViewModel = PostDetailViewModel(userViewModel: self.userViewModel,
                                                          commentsViewModel: response,
                                                          postDescription: self.selectedPostModel?.subTitle)
            
            self.presenter?.presentPostDetail(viewModel: postDetailViewModel)
        }
    }
}
