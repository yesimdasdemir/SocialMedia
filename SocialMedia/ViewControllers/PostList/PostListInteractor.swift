//
//  PostListInteractor.swift
//  SocialMedia
//
//  Created by Yeşim Daşdemir on 21.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostListBusinessLogic {
   func getPostList()
}

protocol PostListDataStore {
  //var name: String { get set }
}

final class PostListInteractor: PostListBusinessLogic, PostListDataStore {
  var presenter: PostListPresentationLogic?
  var worker: PostListWorker?

    func getPostList() {
        
        let url = URL(string: "https://jsonplaceholder.typicode.com/posts")
        
        let session = URLSession.shared
        
        if let url = url {
            let task = session.dataTask(with: url) { (data, response, error) in
                
                if error != nil {
                    let alert = UIAlertController(title: "Error", message: error?.localizedDescription, preferredStyle: .alert)
                    let okButton = UIAlertAction(title: "OK", style: .default, handler: nil)
                    alert.addAction(okButton)
                    
                } else {
                    
                    if let data = data {
                        
                        do {
                            let response = try JSONDecoder().decode([PostList.GetPostList.Response].self, from: data)
                            DispatchQueue.main.async { [weak self] in
                                guard let self = self else {
                                    return
                                }
                                
                                self.presenter?.presentPostList(with: response)
                                debugPrint(response)
                            }
                            
                        } catch  {
                            debugPrint(error)
                        }
                    }
                }
            }
            task.resume()
        }
    }

    
}
